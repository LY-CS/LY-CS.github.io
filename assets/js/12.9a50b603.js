(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{210:function(t,a,s){"use strict";s.r(a);var r=s(0),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"csharp基础·面向对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csharp基础·面向对象"}},[t._v("#")]),t._v(" CSharp基础·面向对象")]),t._v(" "),s("h2",{attrs:{id:"面向对象·概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象·概念"}},[t._v("#")]),t._v(" 面向对象·概念")]),t._v(" "),s("p",[t._v("面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节；这种思想是将数据作为第一位，而方法或者说是算法作为其次，这是对数据一种优化，操作起来更加的方便，简化了过程。")]),t._v(" "),s("p",[t._v("举例来说：就是：比如说你要去饭店吃饭，你只需要饭店，找到饭店的服务员，跟她说你要吃什么，然后就会给你做出来让你吃，你并不需要知道这个饭是怎么错做的，你只需要面向这个服务员，告诉他你要吃什么，然后他也只需要面向你吃完收到钱就好，不需要知道你怎么对这个饭进行吃。")]),t._v(" "),s("h2",{attrs:{id:"面向对象·特点·封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象·特点·封装"}},[t._v("#")]),t._v(" 面向对象·特点·封装")]),t._v(" "),s("p",[t._v("概念：只隐藏对象的属性和实现细节，仅对外提供公共访问方式。")]),t._v(" "),s("p",[t._v("意义：将变化隔离、便于使用、提高复用性、提高安全性")]),t._v(" "),s("h2",{attrs:{id:"面向对象·特点·继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象·特点·继承"}},[t._v("#")]),t._v(" 面向对象·特点·继承")]),t._v(" "),s("p",[t._v("概念：继承的类就可以从被继承的类中获得一些属性和方法。")]),t._v(" "),s("p",[t._v("意义：提高代码复用性；继承是多态的前提。")]),t._v(" "),s("h2",{attrs:{id:"面向对象·特点·多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面向对象·特点·多态"}},[t._v("#")]),t._v(" 面向对象·特点·多态")]),t._v(" "),s("p",[t._v("概念：指不同对象收到相同消息时，会产生不同的行为，同一个类在不同的场合下表现出不同的")]),t._v(" "),s("p",[t._v("意义：把不同的子类对象都当作父类来看，可以屏蔽不同子类对象之间的差异，写出通用de代码，做出通用的编程，以适应需求的不断变化。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("参考文献：")]),t._v(" "),s("p",[t._v("·https://blog.csdn.net/chenqiuping_ls/article/details/53609807")])])}),[],!1,null,null,null);a.default=_.exports}}]);