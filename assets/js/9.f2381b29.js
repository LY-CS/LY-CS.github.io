(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{208:function(t,n,s){"use strict";s.r(n);var e=s(0),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"csharp基础·泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csharp基础·泛型"}},[t._v("#")]),t._v(" CSharp基础·泛型")]),t._v(" "),s("h2",{attrs:{id:"为什么要使用集合？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用集合？"}},[t._v("#")]),t._v(" 为什么要使用集合？")]),t._v(" "),s("p",[t._v("数组的局限性：")]),t._v(" "),s("p",[t._v("（1）数组元素个数是固定的，数组一但定义，就无法改变元素总数。如果需求变化，则必须修改源码")]),t._v(" "),s("p",[t._v("（2）如果初始化元素总数非常大，则会造成空间浪费。")]),t._v(" "),s("p",[t._v("集合的特点：")]),t._v(" "),s("p",[t._v("（1）根据需要动态增加元素个数，没有限制。")]),t._v(" "),s("p",[t._v("（2）可以用以存储多个对象，这是个十分重要的属性。")]),t._v(" "),s("h2",{attrs:{id:"泛型list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型list"}},[t._v("#")]),t._v(" 泛型List"),s("T")],1),t._v(" "),s("p",[t._v("List"),s("T",[t._v("泛型集合的特点：")])],1),t._v(" "),s("p",[t._v("（1）"),s("T",[t._v("表示泛型，T是Type的简写，表示当前不确定具体类型。")])],1),t._v(" "),s("p",[t._v("（2）可以根据用户的实际需要，确定当前集合需要存放的数据类型，一旦确定不可改变。")]),t._v(" "),s("p",[t._v("List"),s("T",[t._v("泛型使用前的准备工作：")])],1),t._v(" "),s("p",[t._v("（1）引入命名空间:System.Collections.Generic")]),t._v(" "),s("p",[t._v("（2）确定存储类型：List"),s("Student",[t._v(" students = new List"),s("Student",[t._v("();")])],1)],1),t._v(" "),s("p",[t._v("常用方法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('            //创建泛型集合\n            List<string> nameList = new List<string>();\n            //添加string元素\n            nameList.Add("张三");\n            nameList.Add("李四");\n            nameList.Add("王五");\n            nameList.Add("林六");\n            //创建方法2\n            //List<string> nameList = new List<string>(){"张三","李四","王五","林六"}\n\n            //统计泛型集合元素个数\n            Console.WriteLine("元素总数：{0}", nameList.Count);\n\n            //删除一个元素\n            nameList.Remove("张三");\n            Console.WriteLine("元素总数：{0}", nameList.Count);\n\n            foreach (string item in nameList)\n            {\n                Console.WriteLine(item);\n            }\n')])])]),s("h2",{attrs:{id:"泛型集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型集合"}},[t._v("#")]),t._v(" 泛型集合")]),t._v(" "),s("p",[t._v("关于Dictionary<K,V>泛型集合：")]),t._v(" "),s("p",[t._v("（1）Dictionary<K,V>通常称为字典，<K,V>约束集合中元素类型。")]),t._v(" "),s("p",[t._v("（2）编译时检查类型约束，无需装拆箱操作。")]),t._v(" "),s("p",[t._v("Dictionary<K,V>泛型集合存储结构\n"),s("a",{attrs:{href:"https://sm.ms/image/RzFp5AKBmk8qLce",target:"_blank"}},[s("img",{attrs:{src:"https://i.loli.net/2020/02/01/RzFp5AKBmk8qLce.png"}})])]),t._v(" "),s("p",[t._v("常用方法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('            //创建泛型集合\n            Dictionary<string,string> nameList = new Dictionary<string, string>();\n            //添加string元素\n            nameList.Add("张三","5岁");\n            nameList.Add("李四","6岁");\n            nameList.Add("王五","7岁");\n            nameList.Add("林六","8岁");\n\n            //查找某个元素\n            Console.WriteLine(nameList["张三"]);\n\n            //遍历字典的key\n            foreach(string key in nameList.Keys)\n            {\n                Console.WriteLine(key);\n            }\n            //遍历字典的value\n            foreach (string value in nameList.Values)\n            {\n                Console.WriteLine(value);\n            }\n')])])])])}),[],!1,null,null,null);n.default=a.exports}}]);